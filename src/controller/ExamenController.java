package controller;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;

import javafx.scene.control.TextField;
import javafx.scene.control.cell.CheckBoxTableCell;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;

import java.io.IOException;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.ResourceBundle;

import conexionBD.ConexionBD;
import dao.ProductosDao;
import javafx.beans.property.ReadOnlyBooleanWrapper;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.web.WebEngine;
import javafx.scene.web.WebView;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.stage.StageStyle;
import model.Producto;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.MenuItem;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;

/**
 * Controlador para la interfaz gráfica de usuario asociada a la gestión de productos.
 */

public class ExamenController implements Initializable {
	@FXML
	private TextField tfCodigoProducto;
	@FXML
	private TextField tfNombre;
	@FXML
	private TextField tfPrecio;
	@FXML
	private CheckBox cbDisponible;
	@FXML
	private Button btnSeleccionImagen;
	@FXML
	private Button btnCrear;
	@FXML
	private Button btnActualizar;
	@FXML
	private Button btnLimpiar;
	@FXML
	private TableView<Producto> tabla;

	private ObservableList<Producto> lista;
	private String codigo, nombre, precio;
	private int disponible;
	private ProductosDao dao;
	private Producto p;

	@FXML
	// Este método se ejecuta cuando se activa el evento asociado al botón o elemento de la interfaz gráfica.
	public void acercaDe(ActionEvent event) {
	    // Se crea un nuevo objeto de tipo Alert con tipo de información.
	    Alert alert = new Alert(Alert.AlertType.INFORMATION);
	    
	    // Configuración del contenido de la alerta.
	    alert.setHeaderText(null); // El encabezado se establece como nulo para evitar un encabezado adicional.
	    alert.setTitle("INFO"); // Se establece el título de la alerta.
	    alert.setContentText("Gestión de productos 1.0 \nAutor: Adrián Llarena"); // Se establece el contenido de la alerta.
	    
	    // Se muestra la alerta y se espera hasta que el usuario la cierre.
	    alert.showAndWait();
	}


	
	@FXML
	public void seleccionImagen(ActionEvent event) {
		// TODO Autogenerated
		
	}

	@FXML
	// Este método se ejecuta cuando se activa el evento asociado al botón o elemento de la interfaz gráfica.
	public void crear(ActionEvent event) {
	    // Se realiza la validación de los campos y se obtiene el mensaje de validación.
	    String msg = validacion();
	    
	    // Si el mensaje de validación está vacío, significa que los campos son válidos y se procede a crear el producto.
	    if (msg.equals("")) {
	        // Se crea un nuevo objeto Producto con los datos ingresados.
	        Producto p = new Producto(codigo, nombre, precio, disponible);
	        
	        // Se intenta crear el producto y se concatena el mensaje resultante al mensaje de validación.
	        msg += dao.crearProductos(p);
	    }
	    
	    // Si el mensaje sigue estando vacío después de intentar la creación, significa que todo fue exitoso.
	    if (msg.equals("")) {
	        // Se muestra una alerta informativa indicando que la operación se realizó correctamente.
	        Alert alert = new Alert(Alert.AlertType.INFORMATION);
	        alert.setHeaderText(null);
	        alert.setTitle("Hecho");
	        alert.setContentText("Creado correctamente \n");
	        
	        // Se intenta cargar la lista de productos y actualizar la tabla.
	        try {
	            lista = dao.cargarProductos();
	            tabla.setItems(lista);
	        } catch (Exception e) {
	            e.printStackTrace();
	            System.out.println("Error en carga");
	        }
	        
	        // Se muestra nuevamente la lista de productos después de la actualización.
	        try {
	            lista = dao.cargarProductos();
	            tabla.setItems(lista);
	        } catch (Exception e) {
	            e.printStackTrace();
	            System.out.println("Error de carga");
	        }
	        
	        // Se limpian los campos del formulario.
	        limpiar();
	    } else {
	        // Si hay un mensaje de error, se llama a la función para mostrar el mensaje de error.
	        leerError(msg);
	    }
	}


	@FXML
	// Este método se ejecuta cuando se activa el evento asociado al botón o elemento de la interfaz gráfica.
	public void ayuda(ActionEvent event) {
	    // Se crea un cargador de FXMLLoader y se especifica la ubicación del archivo FXML de la ventana de ayuda.
	    FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/VisorAyuda.fxml"));
	    
	    // Se inicializa un objeto Parent para almacenar la interfaz gráfica cargada por el FXMLLoader.
	    Parent root;
	    
	    try {
	        // Se carga la interfaz gráfica desde el archivo FXML.
	        root = loader.load();
	        
	        // Se crea una nueva escena utilizando la interfaz gráfica cargada.
	        Scene scene = new Scene(root);
	        
	        // Se crea un nuevo escenario (Stage) para mostrar la ventana de ayuda.
	        Stage stage = new Stage();
	        stage.setScene(scene);
	        
	        // Se establece el título de la ventana de ayuda.
	        stage.setTitle("Ayuda");
	        
	        // Se muestra la ventana de ayuda.
	        stage.show();
	    } catch (IOException e) {
	        // Si hay un error al cargar la interfaz gráfica, se muestra una alerta de error.
	        e.printStackTrace();
	        Alert alert = new Alert(Alert.AlertType.ERROR);
	        alert.setHeaderText(null);
	        alert.setContentText(e.getMessage());
	        alert.showAndWait();
	    }
	}

	@FXML
	// Este método se ejecuta cuando se activa el evento asociado al botón o elemento de la interfaz gráfica.
	public void actualizar(ActionEvent event) {
	    // Se realiza la validación de los campos y se obtiene el mensaje de validación.
	    String msg = validacion();
	    
	    // Si el mensaje de validación está vacío, significa que los campos son válidos y se procede a actualizar el producto.
	    if (msg.equals("")) {
	        // Se crea un nuevo objeto Producto con los datos ingresados.
	        Producto p = new Producto(codigo, nombre, precio, disponible);
	        
	        // Se intenta editar el producto y se concatena el mensaje resultante al mensaje de validación.
	        msg += dao.editarProductos(p);
	    }
	    
	    // Si el mensaje sigue estando vacío después de intentar la actualización, significa que todo fue exitoso.
	    if (msg.equals("")) {
	        // Se muestra una alerta informativa indicando que la operación se realizó correctamente.
	        Alert alert = new Alert(Alert.AlertType.INFORMATION);
	        alert.setHeaderText(null);
	        alert.setTitle("INFO");
	        alert.setContentText("Producto actualizado correctamente \n");
	        
	        // Se intenta cargar la lista de productos y actualizar la tabla.
	        try {
	            lista = dao.cargarProductos();
	            tabla.setItems(lista);
	        } catch (Exception e) {
	            e.printStackTrace();
	            System.out.println("Error en carga");
	        }
	        
	        // Se limpian los campos del formulario.
	        limpiar();
	        
	        // Se muestra la alerta y se espera hasta que el usuario la cierre.
	        alert.showAndWait();
	    } else {
	        // Si hay un mensaje de error, se llama a la función para mostrar el mensaje de error.
	        leerError(msg);
	    }
	}


	@FXML
	// Este método se ejecuta cuando se activa el evento asociado al botón o elemento de la interfaz gráfica.
	public void limpiar(ActionEvent event) {
	    // Llama al método limpiar para realizar la acción de limpiar la interfaz gráfica o restablecer campos del formulario.
	    limpiar();
	}

	// Método para limpiar la interfaz gráfica o restablecer campos del formulario.
	public void limpiar() {
	    // Se establecen valores predeterminados para campos de texto y checkbox.
	    tfCodigoProducto.setText("");
	    tfNombre.setText("");
	    tfPrecio.setText("");
	    cbDisponible.setSelected(false);

	    // Se habilita el campo de código de producto y el botón de creación, y se deshabilita el botón de actualización.
	    tfCodigoProducto.setDisable(false);
	    btnCrear.setDisable(false);
	    btnActualizar.setDisable(true);
	}


	@FXML
	// Este método se ejecuta cuando se hace clic en la tabla con el mouse.
	public void clickTabla(MouseEvent event) {
	    // Llama al método tablaSeleccionada() para realizar acciones relacionadas con la fila seleccionada en la tabla.
	    tablaSeleccionada();

	    // Crea un menú contextual para la tabla.
	    ContextMenu contextMenu = new ContextMenu();

	    // Crea elementos de menú.
	    MenuItem miVarImg = new MenuItem("Ver Informe");
	    MenuItem miEliminar = new MenuItem("Eliminar");

	    // Agrega elementos de menú al menú contextual.
	    contextMenu.getItems().add(miVarImg);
	    contextMenu.getItems().add(miEliminar);

	    // Asigna el menú contextual a la tabla.
	    tabla.setContextMenu(contextMenu);

	    // Asigna acciones a los elementos de menú.
	    miEliminar.setOnAction(e -> eliminar());
	    miVarImg.setOnAction(e -> Lanza(e));
	}
  @FXML
    void Lanza(ActionEvent event) {
                

        try {
            // Carga el informe Jasper desde un archivo externo
            JasperReport report = (JasperReport) JRLoader.loadObject(getClass().getResource("/Coffee.jasper"));

            // Llena el informe con datos y la conexión a la base de datos
            JasperPrint jprint = JasperFillManager.fillReport(report, null, new ConexionBD().getConexion());

            // Muestra el informe en un visor JasperViewer
            JasperViewer viewer = new JasperViewer(jprint, false);
            viewer.setVisible(true);
        } catch (Exception e) {
            // Manejo de excepciones al generar o mostrar el informe
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setHeaderText(null);
            alert.setTitle("ERROR");
            alert.setContentText("Ha ocurrido un error al generar o mostrar el informe.");
            alert.showAndWait();
            e.printStackTrace();
        }
    }
	//Método para validar los campos de entrada y devolver un mensaje de error si es necesario.
	public String validacion() {
	   // Inicializa el mensaje de error como una cadena vacía.
	   String msg = "";
	   
	   // Obtiene los valores de los campos de texto y checkbox.
	   codigo = tfCodigoProducto.getText().toString();
	   nombre = tfNombre.getText().toString();
	   precio = tfPrecio.getText().toString();
	   
	   // Convierte el valor del checkbox a un valor numérico (1 si está seleccionado, 0 si no).
	   disponible = (cbDisponible.isSelected()) ? 1 : 0;
	
	   // Realiza las validaciones específicas para cada campo.
	   // Verifica si el código tiene exactamente 5 dígitos.
	   if (codigo.length() != 5) {
	       msg += "Campo 'codigo' necesita 5 dígitos exactamente \n";
	   }
	
	   // Verifica si el nombre está vacío.
	   if (nombre.equals("")) {
	       msg += "Campo 'nombre' no puede estar vacío \n";
	   }
	
	   // Verifica si el precio es un número válido.
	   try {
	       float aux = Float.parseFloat(precio);
	   } catch (NumberFormatException e) {
	       msg += "Campo 'precio' tiene que ser numérico \n";
	   }
	
	   // Devuelve el mensaje de error resultante.
	   return msg;
	}

	
	
	@Override
	// Método que se ejecuta automáticamente al inicializar el controlador de la interfaz gráfica.
	public void initialize(URL arg0, ResourceBundle arg1) {
	    try {
	        // Se crea un objeto ProductosDao para interactuar con la capa de datos.
	        dao = new ProductosDao();
	        
	        // Se carga la lista de productos desde la base de datos.
	        lista = dao.cargarProductos();

	        // Se configuran las columnas de la tabla y se asignan las propiedades de los productos.
	        TableColumn<Producto, String> colCodigo = new TableColumn<>("CÓDIGO");
	        colCodigo.setCellValueFactory(new PropertyValueFactory<>("codigo"));
	        colCodigo.prefWidthProperty().bind(tabla.widthProperty().multiply(0.25));

	        TableColumn<Producto, String> colNombre = new TableColumn<>("NOMBRE");
	        colNombre.setCellValueFactory(new PropertyValueFactory<>("nombre"));
	        colNombre.prefWidthProperty().bind(tabla.widthProperty().multiply(0.25));

	        TableColumn<Producto, Float> colPrecio = new TableColumn<>("PRECIO");
	        colPrecio.setCellValueFactory(new PropertyValueFactory<>("precio"));
	        colPrecio.prefWidthProperty().bind(tabla.widthProperty().multiply(0.25));

	        TableColumn<Producto, Boolean> colDisponible = new TableColumn<>("DISPONIBLE");
	        colDisponible.setCellValueFactory(cellData -> {
	            Producto p = cellData.getValue();
	            Boolean v = (p.getDisponible() == 1);
	            return new ReadOnlyBooleanWrapper(v);
	        });
	        colDisponible.setCellFactory(CheckBoxTableCell.<Producto>forTableColumn(colDisponible));
	        colDisponible.prefWidthProperty().bind(tabla.widthProperty().multiply(0.245));

	        // Se agregan las columnas a la tabla y se asigna la lista de productos como datos.
	        tabla.getColumns().addAll(colCodigo, colNombre, colPrecio, colDisponible);
	        tabla.setItems(lista);

	    } catch (Exception e) {
	        // Manejo de excepciones al inicializar la interfaz gráfica.
	        e.printStackTrace();
	    }
	}

	
	public void leerError(String msg) {
	    // Crear una instancia de la clase Alert con tipo ERROR
	    Alert alert = new Alert(Alert.AlertType.ERROR);
	    
	    // Configurar el encabezado de la ventana de alerta como nulo
	    alert.setHeaderText(null);
	    
	    // Establecer el título de la ventana de alerta como "Error"
	    alert.setTitle("Error");
	    
	    // Establecer el contenido de la ventana de alerta con el mensaje proporcionado
	    alert.setContentText(msg);
	    
	    // Mostrar la ventana de alerta y esperar a que el usuario la cierre
	    alert.showAndWait();
	}
	
	// Método para realizar acciones específicas cuando se selecciona una fila en la tabla.
	private void tablaSeleccionada() {
	    try {
	        // Obtiene el objeto Producto seleccionado en la tabla.
	        p = (Producto) tabla.getSelectionModel().getSelectedItem();

	        // Asigna los valores del Producto seleccionado a los campos del formulario.
	        tfCodigoProducto.setText(p.getCodigo());
	        tfNombre.setText(p.getNombre());
	        tfPrecio.setText(p.getPrecio());

	        // Configura el estado del checkbox basado en el valor de la propiedad 'disponible' del Producto.
	        cbDisponible.setSelected(p.getDisponible() == 1);

	        // Deshabilita el campo de código de producto y el botón de creación, habilita el botón de actualización.
	        tfCodigoProducto.setDisable(true);
	        btnCrear.setDisable(true);
	        btnActualizar.setDisable(false);
	    } catch (Exception e) {
	        // Manejo de excepciones (puede no ser necesario mostrar un mensaje o hacer algo específico).
	        e.printStackTrace();
	    }
	}

	
	// Método para eliminar un producto seleccionado.
	public void eliminar() {
	    try {
	        // Se utiliza el objeto dao para borrar el producto seleccionado.
	        dao.borrarProductos(p);

	        // Se muestra una alerta informativa indicando que la eliminación fue exitosa.
	        Alert alert = new Alert(Alert.AlertType.INFORMATION);
	        alert.setHeaderText(null);
	        alert.setTitle("Eliminado");
	        alert.setContentText("Eliminado correctamente \n");
	        alert.showAndWait();

	        // Se intenta cargar la lista de productos y actualizar la tabla.
	        try {
	            lista = dao.cargarProductos();
	            tabla.setItems(lista);
	        } catch (Exception e) {
	            e.printStackTrace();
	            System.out.println("Error al cargar");
	        }

	        // Se limpian los campos del formulario.
	        limpiar();
	    } catch (Exception e) {
	        // Manejo de excepciones en caso de error al borrar el producto.
	        e.printStackTrace();
	        leerError("Error al borrar");
	    }
	}

	@FXML
	public void abrirAyuda(ActionEvent event) {
		FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/VisorAyudaOnline.fxml"));
		Parent root;
		try {
			root = loader.load();
			Scene scene = new Scene(root);
			Stage stage = new Stage();
			stage.setScene(scene);
			stage.setTitle("Ayuda");
			stage.show();
		} catch (IOException e) {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setHeaderText(null);
			alert.setContentText(e.getMessage());
			alert.showAndWait();
		}
	}
	
	@FXML
	public void abrirAyudaOnline(ActionEvent event) {
		FXMLLoader loader = new FXMLLoader(getClass().getResource("/fxml/VisorAyudaOnline.fxml"));
		Parent root;
		try {
			root = loader.load();
			Scene scene = new Scene(root);
			Stage stage = new Stage();
			stage.setScene(scene);
			stage.setTitle("Ayuda");
			stage.show();
		} catch (IOException e) {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setHeaderText(null);
			alert.setContentText(e.getMessage());
			alert.showAndWait();
		}
	}


	
}
